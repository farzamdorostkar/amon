#ifndef DW_WRAP_GLIBC_H
#define DW_WRAP_GLIBC_H

size_t dw_strlen(const char *s);

// Each library function wrapper will check the pointers received as argument, 
// and untaint them before calling the real function. 
//
// Each wrapper starts with dw_sin() to indicate that we are within wrappers.
// We first insure that pointers to wrapped symbols are initialized.
// It would be tricky to put the wrapped symbols initialization in
// a "constructor" because some of those wrappers may get called by functions in other
// libraries, before the constructor for this module gets called.
// Thereafter, pointers received as arguments are untainted, and tainting
// pointers generated by nested malloc calls is deactivated. Tainted pointers should not 
// be encountered while within wrappers, and calls to wrapped functions should be avoided.
// 
// Upon exit, sout() restores the state of pointer tainting.

extern int dw_init_stubs;

void dw_init_syscall_stubs();

#define dw_sin() bool sin_save = amon_protect_active; amon_protect_active = false; if(!dw_init_stubs) dw_init_syscall_stubs()
#define dw_sout() amon_protect_active = sin_save

#endif /* DW_WRAP_GLIBC_H */
